{
  "name": "Pypiserver",
  "tagline": "Minimal PyPI server for uploading & downloading packages with pip/easy_install",
  "body": ".. -*- mode: rst; coding: utf-8 -*-\r\n\r\n.. image:: pypiserver_logo.png\r\n   :width: 300 px\r\n   :align: center\r\n\r\n==============================================================================\r\npypiserver - minimal PyPI server for use with pip/easy_install\r\n==============================================================================\r\n|pypi-ver| |travis-status| |dependencies| |downloads-count| |python-ver| \\\r\n|proj-license|\r\n\r\n:Version:     1.2.1.dev0\r\n:Date:        2016-XX-XX\r\n:Source:      https://github.com/pypiserver/pypiserver\r\n:PyPI:        https://pypi.python.org/pypi/pypiserver\r\n:Travis:      https://travis-ci.org/pypiserver/pypiserver\r\n:Maintainers: Kostis Anagnostopoulos <ankostis@gmail.com>,\r\n              Matthew Planchard <mplanchard@gmail.com>\r\n:License:     zlib/libpng + MIT\r\n\r\n*pypiserver* is a minimal PyPI_ compatible server for *pip* or *easy_install*.\r\nIt is based on bottle_ and serves packages from regular directories.\r\nWheels, bdists, eggs and accompanying PGP-signatures can be uploaded\r\neither with *pip*, *setuptools*, `twine`_, `pypi-uploader`_, or simply copied\r\nwith *scp*.\r\n\r\n\r\n.. contents:: Table of Contents\r\n  :backlinks: top\r\n\r\n\r\nQuickstart: Installation and Usage\r\n==================================\r\n*pypiserver* ``> 1.2.x`` works with python ``2.7`` and ``3.3+`` or *pypy*.\r\nOlder python-versions may still work, but they are not tested.\r\nFor legacy python versions, use ``pypiserver-1.1.x`` series.\r\n\r\n.. Tip::\r\n   The commands below work on a unix-like operating system with a posix shell.\r\n   The ``'~'`` character expands to user's home directory.\r\n\r\n   If you're using Windows, you'll have to use their \"Windows counterparts\".\r\n   The same is true for the rest of this documentation.\r\n\r\n\r\n1. Install *pypiserver* with this command::\r\n\r\n    pip install pypiserver                ## Or: pypiserver[passlib,watchdog]\r\n    mkdir ~/packages                      ## Copy packages into this directory.\r\n\r\n   See also `Alternative Installation methods`_.\r\n\r\n2. Copy some packages into your ``~/packages`` folder and then\r\n   get your *pypiserver* up and running::\r\n\r\n    pypi-server -p 8080 ~/packages &      ## Will listen to all IPs.\r\n\r\n3. From the client computer, type this::\r\n\r\n    ## Download and Install hosted packages.\r\n    pip install  --extra-index-url http://localhost:8080/simple/ ...\r\n    ## Search hosted packages\r\n    pip search --index http://localhost:8080/simple/ ...\r\n\r\n   See also `Client-side configurations`_ for avoiding tedious typing.\r\n\r\n4. Enter ``pypi-server -h`` in the cmd-line to print a detailed usage message::\r\n\r\n    pypi-server [OPTIONS] [PACKAGES_DIRECTORY...]\r\n      start PyPI compatible package server serving packages from\r\n      PACKAGES_DIRECTORY. If PACKAGES_DIRECTORY is not given on the\r\n      command line, it uses the default ~/packages.  pypiserver scans this\r\n      directory recursively for packages. It skips packages and\r\n      directories starting with a dot. Multiple package directories can be\r\n      specified.\r\n\r\n    pypi-server understands the following options:\r\n\r\n      -p, --port PORT\r\n        listen on port PORT (default: 8080)\r\n\r\n      -i, --interface INTERFACE\r\n        listen on interface INTERFACE (default: 0.0.0.0, any interface)\r\n\r\n      -a, --authenticate (UPDATE|download|list), ...\r\n        comma-separated list of (case-insensitive) actions to authenticate\r\n        Use '.' or '' for empty. Requires to have set the password (-P option).\r\n        For example to password-protect package downloads (in addition to uploads)\r\n        while leaving listings public, give:\r\n          -P foo/htpasswd.txt  -a update,download\r\n        To drop all authentications, use:\r\n          -P .  -a .\r\n        Note that when uploads are not protected, the `register` command\r\n        is not necessary, but `~/.pypirc` still need username and password fields,\r\n        even if bogus.\r\n        By default, only 'update' is password-protected.\r\n\r\n      -P, --passwords PASSWORD_FILE\r\n        use apache htpasswd file PASSWORD_FILE to set usernames & passwords when\r\n        authenticating certain actions (see -a option).\r\n        If you want to allow un-authorized access, set this option and -a\r\n        explicitly to empty (either '.' or'').\r\n\r\n      --disable-fallback\r\n        disable redirect to real PyPI index for packages not found in the\r\n        local index\r\n\r\n      --fallback-url FALLBACK_URL\r\n        for packages not found in the local index, this URL will be used to\r\n        redirect to (default: http://pypi.python.org/simple)\r\n\r\n      --server METHOD\r\n        use METHOD to run the server. Valid values include paste,\r\n        cherrypy, twisted, gunicorn, gevent, wsgiref, auto. The\r\n        default is to use \"auto\" which chooses one of paste, cherrypy,\r\n        twisted or wsgiref.\r\n\r\n      -r, --root PACKAGES_DIRECTORY\r\n        [deprecated] serve packages from PACKAGES_DIRECTORY\r\n\r\n      -o, --overwrite\r\n        allow overwriting existing package files\r\n\r\n      --hash-algo ALGO\r\n        any `hashlib` available algo used as fragments on package links.\r\n        Set one of (0, no, off, false) to disabled it. (default: md5)\r\n\r\n      --welcome HTML_FILE\r\n        uses the ASCII contents of HTML_FILE as welcome message response.\r\n\r\n      -v\r\n        enable INFO logging;  repeat for more verbosity.\r\n\r\n      --log-conf <FILE>\r\n        read logging configuration from FILE.\r\n        By default, configuration is read from `log.conf` if found in server's dir.\r\n\r\n      --log-file <FILE>\r\n        write logging info into this FILE.\r\n\r\n      --log-frmt <FILE>\r\n        the logging format-string.  (see `logging.LogRecord` class from standard python library)\r\n        [Default: %(asctime)s|%(name)s|%(levelname)s|%(thread)d|%(message)s]\r\n\r\n      --log-req-frmt FORMAT\r\n        a format-string selecting Http-Request properties to log; set to  '%s' to see them all.\r\n        [Default: %(bottle.request)s]\r\n\r\n      --log-res-frmt FORMAT\r\n        a format-string selecting Http-Response properties to log; set to  '%s' to see them all.\r\n        [Default: %(status)s]\r\n\r\n      --log-err-frmt FORMAT\r\n        a format-string selecting Http-Error properties to log; set to  '%s' to see them all.\r\n        [Default: %(body)s: %(exception)s \\n%(traceback)s]\r\n\r\n    pypi-server -h\r\n    pypi-server --help\r\n      show this help message\r\n\r\n    pypi-server --version\r\n      show pypi-server's version\r\n\r\n    pypi-server -U [OPTIONS] [PACKAGES_DIRECTORY...]\r\n      update packages in PACKAGES_DIRECTORY. This command searches\r\n      pypi.python.org for updates and shows a pip command line which\r\n      updates the package.\r\n\r\n    The following additional options can be specified with -U:\r\n\r\n      -x\r\n        execute the pip commands instead of only showing them\r\n\r\n      -d DOWNLOAD_DIRECTORY\r\n        download package updates to this directory. The default is to use\r\n        the directory which contains the latest version of the package to\r\n        be updated.\r\n\r\n      -u\r\n        allow updating to unstable version (alpha, beta, rc, dev versions)\r\n\r\n    Visit https://github.com/pypiserver/pypiserver for more information.\r\n\r\n\r\n\r\nClient-side Configurations\r\n==========================\r\nAlways specifying the the pypi url on the command line is a bit\r\ncumbersome. Since *pypiserver* redirects ``pip/easy_install`` to the\r\n``pypi.python.org`` index if it doesn't have a requested package, it's a\r\ngood idea to configure them to always use your local pypi index.\r\n\r\nConfiguring *pip*\r\n-----------------\r\nFor ``pip`` command this can be done by setting the environment variable\r\n``PIP_EXTRA_INDEX_URL`` in your ``.bashr/.profile/.zshrc``::\r\n\r\n  export PIP_EXTRA_INDEX_URL=http://localhost:8080/simple/\r\n\r\nor by adding the following lines to ``~/.pip/pip.conf``::\r\n\r\n  [global]\r\n  extra-index-url = http://localhost:8080/simple/\r\n\r\n.. Note::\r\n   If you have installed *pypiserver* on a remote url without *https*\r\n   you wil receive an \"untrusted\" warning from *pip*, urging you to append\r\n   the ``--trusted-host`` option.  You can also include this option permanently\r\n   in your configuration-files or environment variables.\r\n\r\n\r\nConfiguring *easy_install*\r\n--------------------------\r\nFor ``easy_install`` command you may set the following configuration in\r\n``~/.pydistutils.cfg``::\r\n\r\n  [easy_install]\r\n  index_url = http://localhost:8080/simple/\r\n\r\n\r\nUploading Packages Remotely\r\n===========================\r\nInstead of copying packages directly to the server's folder (i.e. with ``scp``),\r\nyou may use python tools for the task, e.g. ``python setup.py upload``.\r\nIn that case, *pypiserver* is responsible for authenticating the upload-requests.\r\n\r\n\r\n.. Note::\r\n  We strongly advise to password-protected your uploads!\r\n\r\n  It is possible to disable authentication for uploads (e.g. in intranets).\r\n  To avoid lazy security decisions, read help for ``-P`` and ``-a`` options.\r\n\r\n\r\n*Apache*-like authentication (``htpasswd``)\r\n-------------------------------------------\r\n#. First make sure you have the *passlib* module installed (note that\r\n   ``passlib>=1.6`` is required), which is needed for parsing the Apache\r\n   *htpasswd* file specified by the ``-P``, ``--passwords`` option\r\n   (see next steps)::\r\n\r\n     pip install passlib\r\n\r\n#. Create the Apache *htpasswd* file with at least one user/password pair\r\n   with this command (you'll be prompted for a password)::\r\n\r\n     htpasswd -sc htpasswd.txt <some_username>\r\n\r\n   .. Tip:: Read this SO question for running `htpasswd` cmd\r\n      under *Windows*:\r\n\r\n         http://serverfault.com/questions/152950/how-to-create-and-edit-htaccess-and-htpasswd-locally-on-my-computer-and-then-u\r\n\r\n      or if you have bogus passwords that you don't care because they are for\r\n      an internal service (which is still \"bad\", from a security prespective...)\r\n      you may use this public service:\r\n\r\n         http://www.htaccesstools.com/htpasswd-generator/\r\n\r\n   .. Tip:: When accessing pypiserver via the api, alternate authentication\r\n      methods are available via the ``auther`` config flag. Any callable\r\n      returning a boolean can be passed through to the pypiserver config in\r\n      order to provide custom authentication. For example, to configure\r\n      pypiserver to authenticate using the `python-pam`_::\r\n\r\n        import pam\r\n        pypiserver.default_config(auther=pam.authenticate)\r\n\r\n      Please see `Using Ad-hoc authentication providers`_ for more information.\r\n\r\n#. You  need to restart the server with the ``-P`` option only once\r\n   (but user/password pairs can later be added or updated on the fly)::\r\n\r\n     ./pypi-server -p 8080 -P htpasswd.txt ~/packages &\r\n\r\nUpload with *setuptools*\r\n------------------------\r\n#. On client-side, edit or create a ``~/.pypirc`` file with a similar content::\r\n\r\n     [distutils]\r\n     index-servers =\r\n       pypi\r\n       local\r\n\r\n     [pypi]\r\n     username:<your_pypi_username>\r\n     password:<your_pypi_passwd>\r\n\r\n     [local]\r\n     repository: http://localhost:8080\r\n     username: <some_username>\r\n     password: <some_passwd>\r\n\r\n#. Then from within the directory of the python-project you wish to upload,\r\n   issue this command::\r\n\r\n     python setup.py sdist upload -r local\r\n\r\n\r\nUpload with `twine`_\r\n--------------------\r\nTo avoid storing you passwords on disk, in clear text, you may either:\r\n\r\n- use the ``register`` *setuptools*'s command with the ``-r`` option,\r\n  like that::\r\n\r\n     python setup.py sdist register -r local upload -r local\r\n\r\n- use `twine`_ library, which\r\n  breaks the procedure in two steps.  In addition, it supports signing\r\n  your files with PGP-Signatures and uploading the generated `.asc` files\r\n  to *pypiserver*::\r\n\r\n     twine upload -r local --sign -identity user_name ./foo-1.zip\r\n\r\n\r\nUpload with `pypi-uploader`_\r\n----------------------------\r\nYou can also upload packages using `pypi-uploader`_, which\r\nobviates the need to download packages locally prior to uploading them to\r\npypiserver. You can install it with ``pip install pypi-uploader``, and\r\nassuming you have a ``pypi_local`` source set up in your ``~/.pypirc``,\r\nuse it like this::\r\n\r\n    pypiupload packages mock==1.0.1 requests==2.2.1 -i pypi_local\r\n    pypiupload requirements requirements.txt -i pypi_local\r\n\r\n\r\nAlternative Installation methods\r\n================================\r\nWhen trying the methods below, first use the following command to check whether\r\nprevious versions of *pypiserver* already exist, and (optionally) uninstall them::\r\n\r\n  ## VERSION-CHECK: Fails if not installed.\r\n  pypi-server --version\r\n\r\n  ## UNINSTALL: Invoke again untill it fails.\r\n  pip uninstall pypiserver\r\n\r\n\r\nInstalling the very latest version\r\n----------------------------------\r\nIn case the latest version in *pypi* is a pre-release, you have to use\r\n*pip*'s `--pre` option.  And to update an existing installation combine it\r\nwith `--ignore-installed`::\r\n\r\n  pip install pypiserver --pre -I\r\n\r\nYou can even install the latest *pypiserver* directly from *github* with the\r\nfollowing command, assuming you have *git* installed on your ``PATH``::\r\n\r\n  pip install git+git://github.com/pypiserver/pypiserver.git\r\n\r\n\r\nInstalling it as standalone script\r\n----------------------------------\r\nThe git repository contains a ``pypi-server-standalone.py`` script,\r\nwhich is a single python file that can be executed without any other\r\ndependencies.\r\n\r\nRun the following commands to download the script with ``wget``::\r\n\r\n  wget https://raw.github.com/pypiserver/pypiserver/standalone/pypi-server-standalone.py\r\n  chmod +x pypi-server-standalone.py\r\n\r\nor with ``curl``::\r\n\r\n  curl -O https://raw.github.com/pypiserver/pypiserver/standalone/pypi-server-standalone.py\r\n  chmod +x pypi-server-standalone.py\r\n\r\nYou can then start-up the server with::\r\n\r\n  ./pypi-server-standalone.py\r\n\r\nFeel free to rename the script and move it into your ``$PATH``.\r\n\r\n\r\nRunning on *heroku/dotcloud*\r\n----------------------------\r\nhttps://github.com/dexterous/pypiserver-on-the-cloud contains\r\ninstructions on how to run *pypiserver* on one of the supported cloud\r\nservice providers.\r\n\r\n\r\n\r\nRecipes\r\n=======\r\n\r\nManaging the package directory\r\n------------------------------\r\nThe ``pypi-server`` command has the ``-U`` option that searches for updates of\r\navailable packages. It scans the package directory for available\r\npackages and searches on pypi.python.org for updates. Without further\r\noptions ``pypi-server -U`` will just print a list of commands which must\r\nbe run in order to get the latest version of each package. Output\r\nlooks like::\r\n\r\n    $ ./pypi-server -U\r\n    checking 106 packages for newer version\r\n\r\n    .........u.e...........e..u.............\r\n    .....e..............................e...\r\n    ..........................\r\n\r\n    no releases found on pypi for PyXML, Pymacs, mercurial, setuptools\r\n\r\n    # update raven from 1.4.3 to 1.4.4\r\n    pip -q install --no-deps  --extra-index-url http://pypi.python.org/simple -d /home/ralf/packages/mirror raven==1.4.4\r\n\r\n    # update greenlet from 0.3.3 to 0.3.4\r\n    pip -q install --no-deps  --extra-index-url http://pypi.python.org/simple -d /home/ralf/packages/mirror greenlet==0.3.4\r\n\r\nIt first prints for each package a single character after checking the\r\navailable versions on pypi. A dot(`.`) means the package is up-to-date, ``'u'``\r\nmeans the package can be updated and ``'e'`` means the list of releases on\r\npypi is empty. After that it shows a *pip* command line which can be used\r\nto update a one package. Either copy and paste that or run\r\n``pypi-server -Ux`` in order to really execute those commands. You need\r\nto have *pip* installed for that to work however.\r\n\r\nSpecifying an additional ``-u`` option will also allow alpha, beta and\r\nrelease candidates to be downloaded. Without this option these\r\nreleases won't be considered.\r\n\r\n\r\nServing thousands of packages\r\n-----------------------------\r\n\r\nBy default, *pypiserver* scans the entire packages directory each time an\r\nincoming HTTP request occurs. This isn't a problem for a small number of\r\npackages, but causes noticeable slow-downs when serving thousands of packages.\r\n\r\nIf you run into this problem, significant speedups can be gained by enabling\r\npypiserver's directory caching functionality. The only requirement is to\r\ninstall the ``watchdog`` package, or it can be installed during ``pypiserver``\r\ninstallation, by specifying the ``cache`` extras option::\r\n\r\n    pip install pypiserver[cache]\r\n\r\nIf you are using a static webserver such as *Apache* or *nginx* as\r\na reverse-proxy for pypiserver, additional speedup can be gained by\r\ndirectly serving the packages directory:\r\n\r\nFor instance, in *nginx* you may adding the following config to serve\r\npackages-directly directly (take care not to expose \"sensitive\" files)::\r\n\r\n    location /packages/ {\r\n      root /path/to/packages/parentdir;\r\n    }\r\n\r\nIf you have packages that are very large, you may find it helpful to\r\ndisable hashing of files (set ``--hash-algo=off``, or ``hash_algo=None`` when\r\nusing wsgi).\r\n\r\n\r\nManaging Automated Startup\r\n--------------------------\r\nThere are a variety of options for handling the automated starting of\r\npypiserver upon system startup. Two of the most common are *systemd* and\r\n*supervisor*.\r\n\r\n\r\nRunning as a *systemd* service\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n*systemd* is installed by default on most modern Linux systems and as such,\r\nit is an excellent option for managing the pypiserver process. An example\r\nconfig file for ``systemd`` can be seen below::\r\n\r\n    [Unit]\r\n    Description=A minimal PyPI server for use with pip/easy_install.\r\n    After=network.target\r\n\r\n    [Service]\r\n    Type=simple\r\n    # systemd requires absolute path here too.\r\n    PIDFile=/var/run/pypiserver.pid\r\n    User=www-data\r\n    Group=www-data\r\n\r\n    ExecStart=/usr/local/bin/pypi-server -p 8080 -a update,download --log-file /var/log/pypiserver.log --P /etc/nginx/.htpasswd /var/www/pypi\r\n    ExecStop=/bin/kill -TERM $MAINPID\r\n    ExecReload=/bin/kill -HUP $MAINPID\r\n    Restart=always\r\n\r\n    WorkingDirectory=/var/www/pypi\r\n\r\n    TimeoutStartSec=3\r\n    RestartSec=5\r\n\r\n    [Install]\r\n    WantedBy=multi-user.target\r\n\r\nAdjusting the paths and adding this file as ``pypiserver.service`` into your\r\n``systemd/system`` directory will allow management of the pypiserver process with\r\n``systemctl``, e.g. ``systemctl start pypiserver``.\r\n\r\nMore useful information about *systemd* can be found at\r\nhttps://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\r\n\r\n\r\nLaunching through *supervisor*\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n`supervisor <http://supervisord.org/>`_ has the benefit of being a pure python\r\npackage and as such, it provides excellent cross-platform support for process\r\nmanagement. An example configuration file for ``supervisor`` is given below::\r\n\r\n    [program:pypi]\r\n    command=/home/pypi/pypi-venv/bin/pypi-server -p 7001 -P /home/pypi/.htaccess /home/pypi/packages\r\n    directory=/home/pypi\r\n    user=pypi\r\n    autostart=true\r\n    autorestart=true\r\n    stderr_logfile=/var/log/pypiserver.err.log\r\n    stdout_logfile=/var/log/pypiserver.out.log\r\n\r\nFrom there, the process can be managed via ``supervisord`` using ``supervisorctl``.\r\n\r\n\r\nUsing a different WSGI-server\r\n-----------------------------\r\n- The *bottle* web-server which supports many WSGI-servers, among others,\r\n  *paste*, *cherrypy*, *twisted* and *wsgiref* (part of python); you select\r\n  them using the ``--server`` flag.\r\n\r\n- You may view all supported WSGI servers using the following interactive code::\r\n\r\n    >>> from pypiserver import bottle\r\n    >>> list(bottle.server_names.keys())\r\n    ['cgi', 'gunicorn', 'cherrypy', 'eventlet', 'tornado', 'geventSocketIO',\r\n    'rocket', 'diesel', 'twisted', 'wsgiref', 'fapws3', 'bjoern', 'gevent',\r\n    'meinheld', 'auto', 'aiohttp', 'flup', 'gae', 'paste', 'waitress']\r\n\r\n- If none of the above servers matches your needs, invoke just the\r\n  ``pypiserver:app()`` method which returns the internal WSGI-app WITHOUT\r\n  starting-up a server - you may then send it to any WSGI-server you like.\r\n  Read also the `Utilizing the API`_ section.\r\n\r\n- Some examples are given below - you may find more details in `bottle\r\n  site <http://bottlepy.org/docs/dev/deployment.html#switching-the-server-backend>`_.\r\n\r\nApache (*mod_wsgi*)\r\n~~~~~~~~~~~~~~~~~~~~~\r\nTo use your *Apache2* with *pypiserver*, prefer to utilize *mod_wsgi* as\r\nexplained in `bottle's documentation <http://bottlepy.org/docs/dev/deployment.html#apache-mod-wsgi>`_.\r\n\r\n.. Note::\r\n   If you choose instead to go with *mod_proxy*, mind that you may bump into problems\r\n   with the prefix-path (see `#155 <https://github.com/pypiserver/pypiserver/issues/155>`_).\r\n\r\n1. Adapt and place the following *Apache* configuration either into top-level scope,\r\n   or inside some ``<VirtualHost>`` (contributed by Thomas Waldmann)::\r\n\r\n        WSGIScriptAlias   /     /yoursite/wsgi/pypiserver-wsgi.py\r\n        WSGIDaemonProcess       pypisrv user=pypisrv group=pypisrv umask=0007 \\\r\n                                processes=1 threads=5 maximum-requests=500 \\\r\n                                display-name=wsgi-pypisrv inactivity-timeout=300\r\n        WSGIProcessGroup        pypisrv\r\n        WSGIPassAuthorization On    ## (Optional) Use also apache's authentication.\r\n\r\n        <Directory /yoursite/wsgi >\r\n            Require all granted\r\n        </Directort>\r\n\r\n   or if using older ``Apache < 2.4``, substitute the last part with this::\r\n\r\n        <Directory /yoursite/wsgi >\r\n            Order deny,allow\r\n            Allow from all\r\n        </Directort>\r\n\r\n2. Then create the ``/yoursite/cfg/pypiserver.wsgi`` file and make sure that\r\n   the ``user`` and ``group`` of the ``WSGIDaemonProcess`` directive\r\n   (``pypisrv:pypisrv`` in the example) have the read permission on it::\r\n\r\n        import pypiserver\r\n\r\n        conf = pypiserver.default_config(\r\n            root =          \"/yoursite/packages\",\r\n            password_file = \"/yoursite/htpasswd\", )\r\n        application = pypiserver.app(**conf)\r\n\r\n\r\n   .. Tip::\r\n      If you have installed *pypiserver* in a virtualenv, follow ``mod_wsgi``'s\r\n      `instructions <http://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html>`_\r\n      and prepend the python code above with the following::\r\n\r\n            import site\r\n\r\n            site.addsitedir('/yoursite/venv/lib/pythonX.X/site-packages')\r\n\r\n.. Note::\r\n   For security reasons, notice that the ``Directory`` directive grants access\r\n   to a directory holding the *wsgi* start-up script, alone; nothing else.\r\n\r\n\r\ngunicorn\r\n~~~~~~~~\r\n\r\nThe following command uses *gunicorn* to start *pypiserver*::\r\n\r\n  gunicorn -w4 'pypiserver:app(root=\"/home/ralf/packages\")'\r\n\r\nor when using multiple roots::\r\n\r\n  gunicorn -w4 'pypiserver:app(root=[\"/home/ralf/packages\", \"/home/ralf/experimental\"])'\r\n\r\n\r\npaste/pastedeploy\r\n~~~~~~~~~~~~~~~~~\r\n`paste <http://pythonpaste.org/>`_ allows to run multiple WSGI applications\r\nunder different URL paths. Therefore it's possible to serve different set\r\nof packages on different paths.\r\n\r\nThe following example ``paste.ini`` could be used to serve stable and\r\nunstable packages on different paths::\r\n\r\n    [composite:main]\r\n    use = egg:Paste#urlmap\r\n    /unstable/ = unstable\r\n    / = stable\r\n\r\n    [app:stable]\r\n    use = egg:pypiserver#main\r\n    root = ~/stable-packages\r\n\r\n    [app:unstable]\r\n    use = egg:pypiserver#main\r\n    root = ~/stable-packages\r\n       ~/unstable-packages\r\n\r\n    [server:main]\r\n    use = egg:gunicorn#main\r\n    host = 0.0.0.0\r\n    port = 9000\r\n    workers = 5\r\n    accesslog = -\r\n\r\n.. Note::\r\n   You need to install some more dependencies for this to work, like::\r\n\r\n        pip install paste pastedeploy gunicorn pypiserver\r\n\r\n   The server can then start with::\r\n\r\n        gunicorn_paster paste.ini\r\n\r\n\r\nUtilizing the API\r\n-----------------\r\nIn order to enable ad-hoc authentication-providers or to use WSGI-servers\r\nnot supported by *bottle* out-of-the-box, you needed to launch *pypiserver*\r\nvia its API.\r\n\r\n- The main entry-point for configuring *pypiserver* is the `pypiserver:app()\r\n  <https://github.com/pypiserver/pypiserver/blob/master/pypiserver/__init__.py#L116>`_\r\n  function.  This function returns the internal WSGI-app that you my then\r\n  send to any WSGI-server you like.\r\n\r\n- To get all ``pypiserver:app()`` keywords and their explanations, read the\r\n  function `pypiserver:default_config()\r\n  <https://github.com/pypiserver/pypiserver/blob/master/pypiserver/__init__.py#L35>`_.\r\n\r\n- Finally, to fire-up a WSGI-server with the configured app, invoke\r\n  the ``bottle:run(app, host, port, server)`` function.\r\n  Note that *pypiserver* ships with it's own copy of *bottle*; to use it,\r\n  import it like that: ``from pypiserver import bottle``\r\n\r\nUsing ad-hoc authentication providers\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nThe ``auther`` keyword of ``pypiserver:app()`` function maybe set only using\r\nthe API. This can be any callable that returns a boolean when passed\r\nthe *username* and the *password* for a given request.\r\n\r\nFor example, to authenticate users based on the ``/etc/passwd`` file under Unix,\r\nyou may delegate such decisions to the `python-pam`_ library by following\r\nthese steps:\r\n\r\n1. Ensure ``python-pam`` module is installed::\r\n\r\n    pip install python-pam\r\n\r\n2. Create a python-script along these lines::\r\n\r\n    $ cat > pypiserver-start.py\r\n    import pypiserver\r\n    from pypiserver import bottle\r\n    import pam\r\n    pypiserver.app(root='./packages', auther=pam.authenticate)\r\n    bottle.run(app=app, host='0.0.0.0', port=80, server='auto')\r\n\r\n    [Ctrl+ D]\r\n\r\n3. Invoke the python-script to start-up *pypiserver*::\r\n\r\n    $ python pypiserver-start.py\r\n\r\n\r\n.. Note::\r\n   The `python-pam`_ module, requires *read* access to ``/etc/shadow`` file;\r\n   you may add the user under which *pypiserver* runs into the *shadow*\r\n   group, with a command like this: ``sudo usermod -a -G shadow pypy-user``.\r\n\r\n\r\nSources\r\n=======\r\nTo create a copy of the repository, use::\r\n\r\n    git clone https://github.com/pypiserver/pypiserver.git\r\n    cd pypiserver\r\n\r\nTo receive any later changes, in the above folder use::\r\n\r\n    git pull\r\n\r\n\r\nKnown Limitations\r\n=================\r\n*pypiserver* does not implement the full API as seen on PyPI_. It\r\nimplements just enough to make ``easy_install`` and ``pip install`` to work.\r\n\r\nThe following limitations are known:\r\n\r\n- Command ``pypi -U`` that compares uploaded packages with *pypi* to see if\r\n  they are outdated, does not respect a http-proxy environment variable\r\n  (see `#19 <https://github.com/pypiserver/pypiserver/issues/19>`_).\r\n- It accepts documentation uploads but does not save them to\r\n  disk (see `#47 <https://github.com/pypiserver/pypiserver/issues/47>`_ for a\r\n  discussion)\r\n- It does not handle misspelled packages as *pypi-repo* does,\r\n  therefore it is suggested to use it with ``--extra-index-url`` instead\r\n  of ``--index-url`` (see `#38 <https://github.com/pypiserver/pypiserver/issues/38>`_).\r\n- It does not support changing the *prefix* of the path of the url\r\n  (see `#155 <https://github.com/pypiserver/pypiserver/issues/155>`_ for workarounds).\r\n\r\nPlease use Github's `bugtracker <https://github.com/pypiserver/pypiserver/issues>`_\r\nfor other bugs you find.\r\n\r\n\r\n\r\nSimilar Projects\r\n================\r\nThere are lots of other projects, which allow you to run your own\r\nPyPI server. If *pypiserver* doesn't work for you, the following are\r\namong the most popular alternatives:\r\n\r\n- `devpi-server <https://pypi.python.org/pypi/devpi-server>`_:\r\n  a reliable fast pypi.python.org caching server, part of\r\n  the comprehensive `github-style pypi index server and packaging meta tool\r\n  <https://pypi.python.org/pypi/devpi>`_.\r\n  (version: 2.1.4, access date: 8/3/2015)\r\n\r\n- `pip2pi <https://github.com/wolever/pip2pi>`_\r\n  a simple cmd-line tool that builds a PyPI-compatible local folder from pip requirements\r\n  (version: 0.6.7, access date: 8/3/2015)\r\n\r\n- `flask-pypi-proxy <http://flask-pypi-proxy.readthedocs.org/>`_\r\n  A proxy for PyPI that also enables also uploading custom packages.\r\n\r\n- `twine`_:\r\n  A command-line utility for interacting with PyPI or *pypiserver*.\r\n\r\n- `pypi-uploader`_:\r\n  A command-line utility to upload packages to your *pypiserver* from pypi without\r\n  having to store them locally first.\r\n\r\n- Check this SO question: ` How to roll my own pypi\r\n  <http://stackoverflow.com/questions/1235331/how-to-roll-my-own-pypi>`_\r\n\r\n\r\n\r\nLicensing\r\n=========\r\n*pypiserver* contains a copy of bottle_ which is available under the\r\n*MIT* license, and the remaining part is distributed under the *zlib/libpng* license.\r\nSee the ``LICENSE.txt`` file.\r\n\r\n\r\n\r\n.. _bottle: http://bottlepy.org\r\n.. _PyPI: http://pypi.python.org\r\n.. _twine: https://pypi.python.org/pypi/twine\r\n.. _pypi-uploader: https://pypi.python.org/pypi/pypi-uploader\r\n.. _python-pam: https://pypi.python.org/pypi/python-pam/\r\n.. |travis-status| image:: https://travis-ci.org/pypiserver/pypiserver.svg\r\n    :alt: Travis build status\r\n    :scale: 100%\r\n    :target: https://travis-ci.org/pypiserver/pypiserver\r\n\r\n.. |pypi-ver| image::  https://img.shields.io/pypi/v/pypiserver.svg\r\n    :target: https://pypi.python.org/pypi/pypiserver/\r\n    :alt: Latest Version in PyPI\r\n\r\n.. |python-ver| image:: https://img.shields.io/pypi/pyversions/pypiserver.svg\r\n    :target: https://pypi.python.org/pypi/pypiserver/\r\n    :alt: Supported Python versions\r\n\r\n.. |downloads-count| image:: https://img.shields.io/pypi/dm/pypiserver.svg?period=week\r\n    :target: https://pypi.python.org/pypi/pypiserver/\r\n    :alt: Downloads\r\n\r\n.. |proj-license| image:: https://img.shields.io/badge/license-BSD%2Bzlib%2Flibpng-blue.svg\r\n    :target: https://raw.githubusercontent.com/pypiserver/pypiserver/master/LICENSE.txt\r\n    :alt: Project License\r\n\r\n.. |dependencies| image:: https://img.shields.io/requires/github/pypiserver/pypiserver.svg\r\n    :target: https://requires.io/github/pypiserver/pypiserver/requirements/\r\n    :alt: Dependencies up-to-date?\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}